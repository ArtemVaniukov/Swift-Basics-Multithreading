import UIKit
import PlaygroundSupport


PlaygroundPage.current.needsIndefiniteExecution = true

let tasker = Tasker()

/// –î–∞–≤–∞–π—Ç–µ –Ω–∞–∑–Ω–∞—á–∏–º –Ω–∞—à–µ–π Private –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏ serialPriorityQueue –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è qos, —Ä–∞–≤–Ω–æ–µ .userInitiated, –∏ –ø–æ—Å—Ç–∞–≤–∏–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤ —ç—Ç—É –æ—á–µ—Ä–µ–¥—å —Å–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–Ω–∏—è
///
/// task("üòä")
///
/// –∞ –ø–æ—Ç–æ–º
/// 
/// task("üëπ")
///
/// –≠—Ç–æ—Ç —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç —É–±–µ–¥–∏—Ç –Ω–∞—Å –≤ —Ç–æ–º, —á—Ç–æ –Ω–∞—à–∞ –Ω–æ–≤–∞—è –æ—á–µ—Ä–µ–¥—å serialPriorityQueue –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —è–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π, –∏ –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ async –º–µ—Ç–æ–¥–∞, –∑–∞–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –¥—Ä—É–≥ –∑–∞ –¥—Ä—É–≥–æ–º –≤ –ø–æ—Ä—è–¥–∫–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è:



// let task1: () = task("üòä")
// let task2: () = task("üëπ")


func runTest1() {
    print("\n")
    print("------------------------------------------------")
    print("   Private .serial Q1 - .userInitiated     ")
    print("------------------------------------------------")

    let serialPriorityQueue = DispatchQueue(label: "com.basics.threads.task4.serialQueue.userInititated",
                                        qos: .userInitiated)

    serialPriorityQueue.async { tasker.task("üòä") }
    serialPriorityQueue.async { tasker.task("üëπ") }
    sleep(1)
}

/// –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, –¥–ª—è –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥ async, –Ω—É–∂–Ω–æ –∏–º–µ—Ç—å –º–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–æ–≤ –ª–∏–±–æ –∑–∞ —Å—á–µ—Ç —Ä–∞–∑–Ω—ã—Ö –æ—á–µ—Ä–µ–¥–µ–π, –ª–∏–±–æ –∑–∞ —Å—á–µ—Ç —Ç–æ–≥–æ, —á—Ç–æ —Å–∞–º–∞ –æ—á–µ—Ä–µ–¥—å —è–≤–ª—è–µ—Ç—Å—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π (.concurrent). –ù–∏–∂–µ –≤ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–µ —Å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–º–∏ (.concurrent) –æ—á–µ—Ä–µ–¥—è–º–∏ –º—ã —É–≤–∏–¥–∏–º –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–π —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç —Å Private –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π (.concurrent) –æ—á–µ—Ä–µ–¥—å—é workerQueue, –Ω–æ —Ç–∞–º –±—É–¥–µ—Ç —Å–æ–≤—Å–µ–º –¥—Ä—É–≥–∞—è –∫–∞—Ä—Ç–∏–Ω–∞, –∫–æ–≥–¥–∞ –º—ã –±—É–¥–µ–º –ø–æ–º–µ—â–∞—Ç—å –≤ —ç—Ç—É –æ—á–µ—Ä–µ–¥—å —Ç–µ –∂–µ —Å–∞–º—ã–µ –∑–∞–¥–∞–Ω–∏—è.

/// –î–∞–≤–∞–π—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ Private –æ—á–µ—Ä–µ–¥–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ —ç—Ç—É –æ—á–µ—Ä–µ–¥–∏ —Å–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–Ω–∏–π
///
/// task("üòä")
///
/// –∞ –ø–æ—Ç–æ–º –∑–∞–¥–∞–Ω–∏–π
///
/// task("üëπ")
 
func runTest2() {
    /// –æ—á–µ—Ä–µ–¥—å serialUserInititatedQueue c qos .userInitiated
    let serialUserInititatedQueue = DispatchQueue(label: "com.basics.threads.task4.serialQueue.userInititated",
                                                  qos: .userInitiated)

    /// –æ—á–µ—Ä–µ–¥—å serialBackgroundQueue c qos .background
    let serialBackgroundQueue = DispatchQueue(label: "com.basics.threads.task4.serialQueue.background",
                                              qos: .background)

    print("\n")
    print("------------------------------------------------")
    print("   Private .serial Q1 - .userInitiated     ")
    print("                   Q2 - .background        ")
    print("------------------------------------------------")

    serialUserInititatedQueue.async { tasker.task("üòä") }
    serialBackgroundQueue.async { tasker.task("üëπ") }
    sleep(1)
    
    /// –ó–¥–µ—Å—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π, –∏ –∑–∞–¥–∞–Ω–∏—è —á–∞—â–µ –∏—Å–ø–æ–ª–Ω—è—é—Ç—Å—è –Ω–∞ –æ—á–µ—Ä–µ–¥–∏ serialUserInititatedQueue, –∏–º–µ—é—â–µ–π –±–æ–ª–µ–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è qos: .userIniatated.
}

func runTest3() {
    /// –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–µ—Ä–∂–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –ª—é–±–æ–π –æ—á–µ—Ä–µ–¥–∏ DispatchQueue –Ω–∞ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è, –Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ now() + 0.1 —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ asyncAfter –∏ –µ—â–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏ —ç—Ç–æ–º –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è qos:
    ///
    print("\n")
    print("------------------------------------------------")
    print("   asyncAfter(.userInteractive) –Ω–∞ Q2")
    print("   Private .serial Q1 - .utility     ")
    print("                   Q2 - .background  ")
    print("------------------------------------------------")
    
    let serialUtilityQueue = DispatchQueue(label: "com.basics.threads.task4.serialQueue.utility",
                                           qos: .utility)
    let serialBackgroundQueue = DispatchQueue(label: "com.basics.threads.task4.serialQueue.background",
                                              qos: .background)
    
    serialBackgroundQueue.asyncAfter(deadline: .now() + 0.1, qos: .userInteractive) { tasker.task("üëπ") }
    serialUtilityQueue.async { tasker.task("üòä") }
    sleep(1)
}

/// Switch between tests
runTest1()
runTest2()
runTest3()
