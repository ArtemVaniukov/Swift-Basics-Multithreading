import UIKit
import PlaygroundSupport

PlaygroundPage.current.needsIndefiniteExecution = true

let tasker = Tasker()

/// –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–º–µ—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–∞ Dispatch –æ—á–µ—Ä–µ–¥—è—Ö, —Ç–æ –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å DispatchWorkItem, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è qos, –∏ –æ–Ω–æ –±—É–¥–µ—Ç –≤–æ–∑–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–∞ –µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ:
let highPriorityItem = DispatchWorkItem(qos: .userInteractive, flags: [.enforceQoS]) {
    tasker.taskHighPriority("üå∫")
}
/// –ó–∞–¥–∞–≤–∞—è —Ñ–ª–∞–≥ [.enforceQoS] –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ DispatchWorkItem, –º—ã –ø–æ–ª—É—á–∞–µ–º –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –∑–∞–¥–∞–Ω–∏—è highPriorityItem –ø–µ—Ä–µ–¥ –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏ –Ω–∞ —Ç–æ–π –∂–µ –æ—á–µ—Ä–µ–¥–∏:

func runTest1() {
    print("\n")
    print("------------------------------------------------")
    print("   .concurrent Q1 - .userInitiated ")
    print("               Q2 - .background ")
    print("------------------------------------------------")
    
    let userInitiatedConcurrentQueue = DispatchQueue(label: "com.basics.threads.task6.concurrentQueue.userInititated",
                                                     qos: .userInitiated,
                                                     attributes: .concurrent)
    let backgroundConcurrentQueue = DispatchQueue(label: "com.basics.threads.task6.concurrentQueue.background",
                                                  qos: .background,
                                                  attributes: .concurrent)
    
    userInitiatedConcurrentQueue.async { tasker.task("ü•∏") }
    backgroundConcurrentQueue.async { tasker.task("ü§¢") }
    
    userInitiatedConcurrentQueue.async(execute: highPriorityItem)
    backgroundConcurrentQueue.async(execute: highPriorityItem)
    
    sleep(1)
    
    /// –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–≤—ã—à–∞—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ Dispatch Queue c –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è qos –∏, —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, –±–æ—Ä–æ—Ç—å—Å—è —Å —è–≤–ª–µ–Ω–∏–µ–º ¬´–∏–Ω–≤–µ—Ä—Å–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤¬ª. –ú—ã –≤–∏–¥–∏–º, —á—Ç–æ –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ —Ç–æ, —á—Ç–æ –¥–≤–∞ –∑–∞–¥–∞–Ω–∏—è highPriorityItem —Å—Ç–∞—Ä—Ç—É—é—Ç —Å–∞–º—ã–º–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏, –æ–Ω–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ –±–ª–∞–≥–æ–¥–∞—Ä—è —Ñ–ª–∞–≥—É [.enforceQoS] –∏ –ø–æ–≤—ã—à–µ–Ω–∏—é –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –¥–æ .userInteractive. –ö—Ä–æ–º–µ —Ç–æ–≥–æ, –∑–∞–¥–∞–Ω–∏–µ highPriorityItem –º–æ–∂–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ—á–µ—Ä–µ–¥—è—Ö.
}

func runTest2() {
    print("\n")
    print("------------------------------------------------")
    print("   .concurrent Q1 - .userInitiated ")
    print("               Q2 - .background ")
    print("------------------------------------------------")
    
    /// –ï—Å–ª–∏ –º—ã —É–±–µ—Ä–µ–º —Ñ–ª–∞–≥ [.enforceQoS]:
    let highPriorityItem = DispatchWorkItem(qos: .userInteractive) {
        tasker.taskHighPriority("üå∫")
    }
    ///  —Ç–æ –∑–∞–¥–∞–Ω–∏—è highPriorityItem –±—É–¥—É—Ç –±—Ä–∞—Ç—å —Ç–æ –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ qos, –∫–æ—Ç–æ—Ä–æ–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –æ—á–µ—Ä–µ–¥–∏, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –æ–Ω–∏ –∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è:
    
    let userInitiatedConcurrentQueue = DispatchQueue(label: "com.basics.threads.task6.concurrentQueue.userInititated",
                                                     qos: .userInitiated,
                                                     attributes: .concurrent)
    let backgroundConcurrentQueue = DispatchQueue(label: "com.basics.threads.task6.concurrentQueue.background",
                                                  qos: .background,
                                                  attributes: .concurrent)
    
    userInitiatedConcurrentQueue.async { tasker.task("ü•∏") }
    backgroundConcurrentQueue.async { tasker.task("ü§¢") }
    
    userInitiatedConcurrentQueue.async(execute: highPriorityItem)
    backgroundConcurrentQueue.async(execute: highPriorityItem)
    
    sleep(1)
}

// Switch tests
runTest1()
//runTest2()
